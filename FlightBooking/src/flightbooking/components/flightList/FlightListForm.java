/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package flightbooking.components.flightList;
    
   
/**
 *
 * @author night
 */
import flightbooking.Main;
import javax.swing.table.DefaultTableModel;
import flightbooking.components.ReadWrite.FileWrite;

public class FlightListForm extends javax.swing.JFrame {

   /**
     * Creates new form flightList
     */
    public FlightListForm() {
        initComponents();
    }
    
    
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        remarksDialog = new javax.swing.JDialog();
        jLabel1 = new javax.swing.JLabel();
        remarksText = new javax.swing.JTextField();
        okButtonRemarksDialog = new javax.swing.JButton();
        cancelButtonRemarksDialog = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jButton1 = new javax.swing.JButton();
        cancelFlightButton = new javax.swing.JButton();
        cancelled = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        flightsTable = new javax.swing.JTable();
        mainMenu = new javax.swing.JButton();

        remarksDialog.setMinimumSize(new java.awt.Dimension(600, 150));
        remarksDialog.setModal(true);
        remarksDialog.setModalExclusionType(java.awt.Dialog.ModalExclusionType.APPLICATION_EXCLUDE);
        remarksDialog.setPreferredSize(new java.awt.Dimension(600, 150));
        remarksDialog.setResizable(false);
        remarksDialog.setSize(new java.awt.Dimension(600, 150));
        remarksDialog.getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel1.setText("Remarks");
        remarksDialog.getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(230, 20, -1, -1));
        remarksDialog.getContentPane().add(remarksText, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 40, 426, 40));

        okButtonRemarksDialog.setText("ok");
        okButtonRemarksDialog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                okButtonRemarksDialogMouseClicked(evt);
            }
        });
        remarksDialog.getContentPane().add(okButtonRemarksDialog, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 30, -1, -1));

        cancelButtonRemarksDialog.setText("cancel");
        cancelButtonRemarksDialog.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelButtonRemarksDialogMouseClicked(evt);
            }
        });
        remarksDialog.getContentPane().add(cancelButtonRemarksDialog, new org.netbeans.lib.awtextra.AbsoluteConstraints(500, 70, -1, -1));

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setFocusable(false);
        setMinimumSize(new java.awt.Dimension(1743, 800));
        setResizable(false);
        setSize(new java.awt.Dimension(1743, 800));

        jPanel1.setInheritsPopupMenu(true);
        jPanel1.setMinimumSize(new java.awt.Dimension(1743, 800));
        jPanel1.setPreferredSize(new java.awt.Dimension(1743, 800));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jButton1.setText("All Flights");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });
        jPanel1.add(jButton1, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 20, 130, 30));

        cancelFlightButton.setText("Cancel Flight");
        cancelFlightButton.setEnabled(false);
        cancelFlightButton.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelFlightButtonMouseClicked(evt);
            }
        });
        jPanel1.add(cancelFlightButton, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 100, 130, 30));

        cancelled.setText("Cancelled");
        cancelled.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                cancelledMouseClicked(evt);
            }
        });
        jPanel1.add(cancelled, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 60, 130, 30));

        flightsTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "FLIGHT ID ", "AIRPLANE CODE", "DEPARTURE DATE", "DEPARTURE TIME", "DESTINATION", "VACANT SEAT", "SEAT TYPE", "STATUS", "REMARKS"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        flightsTable.setFocusable(false);
        flightsTable.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                flightsTableFocusGained(evt);
            }
        });
        flightsTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                flightsTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(flightsTable);
        if (flightsTable.getColumnModel().getColumnCount() > 0) {
            flightsTable.getColumnModel().getColumn(0).setResizable(false);
            flightsTable.getColumnModel().getColumn(1).setResizable(false);
            flightsTable.getColumnModel().getColumn(2).setResizable(false);
            flightsTable.getColumnModel().getColumn(3).setResizable(false);
            flightsTable.getColumnModel().getColumn(4).setResizable(false);
            flightsTable.getColumnModel().getColumn(5).setResizable(false);
            flightsTable.getColumnModel().getColumn(6).setResizable(false);
            flightsTable.getColumnModel().getColumn(7).setResizable(false);
            flightsTable.getColumnModel().getColumn(8).setResizable(false);
        }

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(190, 20, 1530, 760));

        mainMenu.setText("Main Menu");
        mainMenu.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                mainMenuMouseClicked(evt);
            }
        });
        jPanel1.add(mainMenu, new org.netbeans.lib.awtextra.AbsoluteConstraints(30, 750, 130, 30));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        allFlights();
    }//GEN-LAST:event_jButton1ActionPerformed

    private void cancelledMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelledMouseClicked
        showCancelled();
    }//GEN-LAST:event_cancelledMouseClicked

    private void cancelFlightButtonMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelFlightButtonMouseClicked
        if("CANCELLED".equals(flightsTable.getValueAt(flightsTable.getSelectedRow(), 7))){
             System.out.print("flight already canceled");
        } else{
            remarksText.setText(Main.DEFAULT_REMARKS);
            remarksDialog.setVisible(true);
        }
    }//GEN-LAST:event_cancelFlightButtonMouseClicked

    private void flightsTableFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_flightsTableFocusGained
        
    }//GEN-LAST:event_flightsTableFocusGained

    private void flightsTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_flightsTableMouseClicked
       
    }//GEN-LAST:event_flightsTableMouseClicked

    private void mainMenuMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_mainMenuMouseClicked
        
   
        Main.viewFlightForm.setVisible(false);
     
    }//GEN-LAST:event_mainMenuMouseClicked

    private void okButtonRemarksDialogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_okButtonRemarksDialogMouseClicked
        cancelFlight();
        remarksDialog.setVisible(false);
    }//GEN-LAST:event_okButtonRemarksDialogMouseClicked

    private void cancelButtonRemarksDialogMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_cancelButtonRemarksDialogMouseClicked
        remarksDialog.setVisible(false);
    }//GEN-LAST:event_cancelButtonRemarksDialogMouseClicked

    /**
     * @param args the command line arguments
     */
 
   // [FORMAT]: FLIGHT ID / AIRPLANE CODE / DEPARTURE DATE / DEPARTURE TIME/ DESTINATION/ VACANT SEATS / SEAT TYPE / STATUS / REMARKS

    public void allFlights(){
        
        
        int count;
        
         cancelFlightButton.setEnabled(true);
        
        count = 0;
        while(count < Main.flights.length){
            if(Main.flights[count].getFlightId() == null){
                break;
            }
            count++;
        }
        
        String flightFormat[] = {"FLIGHT ID", "AIRPLANE CODE", "DEPARTURE DATE", "DEPARTURE TIME", "DESTINATION", "VACANT SEATS", "SEAT TYPE", "STATUS", "REMARKS" };
   
        Object flights[][] = new Object[count][Main.FLIGHT_FORMAT_COUNT];
 
        for(int i = 0; i < Main.flights.length; i++){
            
            if(Main.flights[i].getFlightId() == null){
                break;
            }
            flights[i][0] = Main.flights[i].getFlightId();
            flights[i][1] = Main.flights[i].getAirplaneCode();
            flights[i][2] = Main.flights[i].getDepartureDate();
            flights[i][3] = Main.flights[i].getDepartureTime();
            flights[i][4] = Main.flights[i].getDestination();
            flights[i][5] = Main.flights[i].getVacantSeat();
            flights[i][6] = Main.flights[i].getSeatType();
            flights[i][7] = Main.flights[i].getStatus();
            flights[i][8] = Main.flights[i].getRemarks();           
        }
        
       
        DefaultTableModel model = new DefaultTableModel(flights, flightFormat);
       
        flightsTable.setModel(model);
        
    }
    
    public void showCancelled(){
        int count;
        int cancelledCount;

        
        cancelFlightButton.setEnabled(false);
        
        
        
              
        cancelledCount = 0;
        count = 0;
        while(count < Main.flights.length){
                
            if(Main.flights[count].getFlightId() == null){
                    break;
                }
                
            if("CANCELLED".equals(Main.flights[count].getStatus())){
                cancelledCount++;
            }
            count++;
        }
       
        String flightFormat[] = {"FLIGHT ID", "AIRPLANE CODE", "DEPARTURE DATE", "DEPARTURE TIME", "DESTINATION", "VACANT SEATS", "SEAT TYPE", "STATUS", "REMARKS" };
   
        Object flights[][] = new Object[cancelledCount][Main.FLIGHT_FORMAT_COUNT];
 
        int cancelledFlights = 0;
        for(int i = 0; i < Main.flights.length; i++){
                
            if(Main.flights[i].getFlightId() == null){
                    break;
            }
            
            if("CANCELLED".equals(Main.flights[i].getStatus())){
                
                flights[cancelledFlights][0] = Main.flights[i].getFlightId();
                flights[cancelledFlights][1] = Main.flights[i].getAirplaneCode();
                flights[cancelledFlights][2] = Main.flights[i].getDepartureDate();
                flights[cancelledFlights][3] = Main.flights[i].getDepartureTime();
                flights[cancelledFlights][4] = Main.flights[i].getDestination();
                flights[cancelledFlights][5] = Main.flights[i].getVacantSeat();
                flights[cancelledFlights][6] = Main.flights[i].getSeatType();
                flights[cancelledFlights][7] = Main.flights[i].getStatus();
                flights[cancelledFlights][8] = Main.flights[i].getRemarks();    
                cancelledFlights++;
                
            }
        }
        
       
        DefaultTableModel model = new DefaultTableModel(flights, flightFormat);
       
        flightsTable.setModel(model);
        
        
        
    }
    
    public void cancelFlight(){
       
      
        
        int row = flightsTable.getSelectedRow();
       
        
        String flightId = (String) flightsTable.getValueAt(row, 0);
        
        
        for(int i = 0; i < Main.flights.length; i++){
            
             if(Main.flights[i].getFlightId() == null){
                    break;
            }
             
             if(flightId.equals(Main.flights[i].getFlightId())){
                 Main.flights[i].setStatus("CANCELLED");
                 Main.flights[i].setRemarks(remarksText.getText());
                 
             }
            
        }
        
        allFlights();
        FileWrite.updateFlightData();
          
    }
    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton cancelButtonRemarksDialog;
    private javax.swing.JButton cancelFlightButton;
    private javax.swing.JButton cancelled;
    private javax.swing.JTable flightsTable;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton mainMenu;
    private javax.swing.JButton okButtonRemarksDialog;
    private javax.swing.JDialog remarksDialog;
    private javax.swing.JTextField remarksText;
    // End of variables declaration//GEN-END:variables
}
